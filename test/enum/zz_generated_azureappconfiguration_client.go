// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package enum

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strings"
)

type azureAppConfigurationClient struct {
	con *connection
}

// CheckKeyValues - Requests the headers and status of the given resource.
// If the operation fails it returns a generic error.
func (client *azureAppConfigurationClient) CheckKeyValues(ctx context.Context, options *AzureAppConfigurationCheckKeyValuesOptions) (AzureAppConfigurationCheckKeyValuesResponse, error) {
	req, err := client.checkKeyValuesCreateRequest(ctx, options)
	if err != nil {
		return AzureAppConfigurationCheckKeyValuesResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AzureAppConfigurationCheckKeyValuesResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AzureAppConfigurationCheckKeyValuesResponse{}, client.checkKeyValuesHandleError(resp)
	}
	return AzureAppConfigurationCheckKeyValuesResponse{RawResponse: resp.Response}, nil
}

// checkKeyValuesCreateRequest creates the CheckKeyValues request.
func (client *azureAppConfigurationClient) checkKeyValuesCreateRequest(ctx context.Context, options *AzureAppConfigurationCheckKeyValuesOptions) (*azcore.Request, error) {
	urlPath := "/kv"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.Foo != nil {
		reqQP.Set("Foo", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.Foo), "[]")), ","))
	}
	req.URL.RawQuery = reqQP.Encode()
	return req, nil
}

// checkKeyValuesHandleError handles the CheckKeyValues error response.
func (client *azureAppConfigurationClient) checkKeyValuesHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// CheckKeyValuesA - Requests the headers and status of the given resource.
// If the operation fails it returns a generic error.
func (client *azureAppConfigurationClient) CheckKeyValuesA(ctx context.Context, options *AzureAppConfigurationCheckKeyValuesAOptions) (AzureAppConfigurationCheckKeyValuesAResponse, error) {
	req, err := client.checkKeyValuesACreateRequest(ctx, options)
	if err != nil {
		return AzureAppConfigurationCheckKeyValuesAResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AzureAppConfigurationCheckKeyValuesAResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AzureAppConfigurationCheckKeyValuesAResponse{}, client.checkKeyValuesAHandleError(resp)
	}
	return AzureAppConfigurationCheckKeyValuesAResponse{RawResponse: resp.Response}, nil
}

// checkKeyValuesACreateRequest creates the CheckKeyValuesA request.
func (client *azureAppConfigurationClient) checkKeyValuesACreateRequest(ctx context.Context, options *AzureAppConfigurationCheckKeyValuesAOptions) (*azcore.Request, error) {
	urlPath := "/ka"
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.OtherSelect != nil {
		reqQP.Set("$OtherSelect", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.OtherSelect), "[]")), ","))
	}
	req.URL.RawQuery = reqQP.Encode()
	return req, nil
}

// checkKeyValuesAHandleError handles the CheckKeyValuesA error response.
func (client *azureAppConfigurationClient) checkKeyValuesAHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// GetKeyValues - Gets a list of key-values.
// If the operation fails it returns a generic error.
func (client *azureAppConfigurationClient) GetKeyValues(ctx context.Context, options *AzureAppConfigurationGetKeyValuesOptions) (AzureAppConfigurationGetKeyValuesResponse, error) {
	req, err := client.getKeyValuesCreateRequest(ctx, options)
	if err != nil {
		return AzureAppConfigurationGetKeyValuesResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AzureAppConfigurationGetKeyValuesResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AzureAppConfigurationGetKeyValuesResponse{}, client.getKeyValuesHandleError(resp)
	}
	return AzureAppConfigurationGetKeyValuesResponse{RawResponse: resp.Response}, nil
}

// getKeyValuesCreateRequest creates the GetKeyValues request.
func (client *azureAppConfigurationClient) getKeyValuesCreateRequest(ctx context.Context, options *AzureAppConfigurationGetKeyValuesOptions) (*azcore.Request, error) {
	urlPath := "/kv"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.Foo != nil {
		reqQP.Set("Foo", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.Foo), "[]")), ","))
	}
	req.URL.RawQuery = reqQP.Encode()
	return req, nil
}

// getKeyValuesHandleError handles the GetKeyValues error response.
func (client *azureAppConfigurationClient) getKeyValuesHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
